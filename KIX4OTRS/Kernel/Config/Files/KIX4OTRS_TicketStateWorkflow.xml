<?xml version="1.0" encoding="utf-8"?>
<otrs_config version="1.0" init="KIXFramework">
    <CVS>$Id$</CVS>

    <ConfigItem Name="Ticket::Acl::Module###950_TicketStateWorkflow" Required="0" Valid="0">
        <Description Translatable="1">Ticket-ACLs to define the following possible state.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Acl::TicketStateWorkflow</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflow" Required="1" Valid="1">
        <Description Translatable="1">Settings for TicketStateWorkflow to define the following possible state. States have to be comma separated. placeholders are _ANY_ , _PREVIOUS_ and _NONE_.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="new">_ANY_</Item>
                <Item Key="merged">_NONE_</Item>
                <Item Key="removed">_NONE_</Item>
                <Item Key="pending auto close+">_PREVIOUS_</Item>
                <Item Key="pending auto close-">_PREVIOUS_</Item>
                <Item Key="pending reminder">_ANY_</Item>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="TicketStateWorkflow::FallbackForPreviousState" Required="0" Valid="1">
        <Description Translatable="1">Used ticket state, if "_PREVIOUS_" ticket state could not be determined. As key you have to define the ticket type + ":::" + current state OR the ticket type.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Incident">processing</Item>
                <Item Key="Problem">new</Item>
                <Item Key="Service Request">processing</Item>
                <Item Key="RfC">processing</Item>
                <Item Key="Event">new</Item>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="TicketStateWorkflow::DefaultTicketState" Required="1" Valid="1">
        <Description Translatable="1">Settings for Default TicketState to define the following possible state.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="TicketStateWorkflow::DefaultTicketQueue" Required="1" Valid="1">
        <Description Translatable="1">Settings for DefaultTicket-Queue.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>

    <!-- REDEFINE EVENTHANDLER FOR STATE UPDATE ON LOCK -->
    <ConfigItem Name="Ticket::EventModulePost###130-ForceStateChangeOnLock" Required="0" Valid="0">
        <Description Translatable="1">Ticket event module to force a new ticket state after lock action. As key you have to define the ticket type + ":::" + current state and the next state as content after lock action.</Description>
        <Group>Ticket</Group>
        <SubGroup>Core::Ticket</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketStateWorkflowForceState</Item>
                <Item Key="Event">TicketLockUpdate</Item>
                <Item Key="new">open</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <!-- EO REDEFINE EVENTHANDLER FOR STATE UPDATE ON LOCK -->

    <!-- DEFAULT TICKET STATE PER TICKET TYPE -->
    <ConfigItem Name="Ticket::EventModulePost###700-TicketStateWorkflowTypeUpdate" Required="0" Valid="0">
        <Description Translatable="1">Updates ticket state if configured or required after type update.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketStateWorkflowTypeUpdate</Item>
                <Item Key="Event">TicketTypeUpdate</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflow::ForceDefaultTicketState" Required="1" Valid="1">
        <Description Translatable="1">Set a true-value for key (ticket type) if a type update forces a state update to the default state. The update is done whenever the original ticket state does not appear in the new ticket types workflow definition.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <!--  EO DEFAULT TICKET STATE PER TICKET TYPE -->

    <!-- POSTMASTER FOLLOWUP CONFIG -->
    <ConfigItem Name="TicketStateWorkflow::PostmasterFollowUpState" Required="1" Valid="1">
        <Description Translatable="1">The state if a ticket got a follow-up (use _PREVIOUS_ as placeholder for the very last state in ticket history before current).</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::PostMaster</SubGroup>
        <Setting>
            <Hash>
                <Item Key="closed successful">open</Item>
                <Item Key="closed unsuccessful">open</Item>
                <Item Key="pending auto close+">open</Item>
                <Item Key="pending auto close-">open</Item>
                <Item Key="pending auto reopen">open</Item>
                <Item Key="pending reminder">open</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflow::PostmasterFollowUpCheckCustomerIDFrom" Required="0" Valid="1">
        <Description Translatable="1">Checks if the sender of a follow-up message is contained in customer database an has an identical customer-ID as the ticket. If so, the email is considered as email-external, otherwise it is considered as email-internal. Default OTRS-behavior if disabled.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::PostMaster</SubGroup>
        <Setting>
            <Option SelectedID="1">
                <Item Key="0">No</Item>
                <Item Key="1">Yes</Item>
            </Option>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflow::PostmasterFollowUpCheckAgentFrom" Required="0" Valid="1">
        <Description Translatable="1">Checks if the sender of a follow-up message is contained in agent database, and if so sets sender type "agent".</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::PostMaster</SubGroup>
        <Setting>
            <Option SelectedID="0">
                <Item Key="0">No</Item>
                <Item Key="1">Yes</Item>
            </Option>
        </Setting>
    </ConfigItem>
    <!-- EO POSTMASTER FOLLOWUP CONFIG -->

    <!--  AUTOMATIC STATE ACTIONS -->
    <ConfigItem Name="Ticket::EventModulePost###701-TicketStateWorkflowAutomaticStateAction" Required="0" Valid="0">
        <Description Translatable="1">Moves ticket after state update.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketStateWorkflowAutomaticStateAction</Item>
                <Item Key="Event">(TicketStateUpdate|TicketCreate)</Item>
                <Item Key="Transaction">1</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflowAutomaticStateAction###NextStateSet" Required="1" Valid="1">
        <Description Translatable="1">Automatically sets the state named by value if the state named in key is reached. Key may be prefixed by a certain ticket type name for which this state transition is valid only.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflowAutomaticStateAction###NextStatePendingOffset" Required="1" Valid="1">
        <Description Translatable="1">If the automatically set state is a pending state, the pending offset time can be defined here (business minutes). Key must be the same as in NextStateSet.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="Ticket::StateAfterPending" Required="1" Valid="1">
        <Description Translatable="1">Define which ticket state should be set automatically (Value) after pending time of state (Key) has been reached. As key you can use the current ticket state OR the ticket type + ":::" + current state (more restrictive).</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="pending auto close+">closed successful</Item>
                <Item Key="pending auto close-">closed unsuccessful</Item>
                <Item Key="pending auto reopen">open</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflowAutomaticStateAction###QueueMove" Required="0" Valid="1">
        <Description Translatable="1">Automatically moves ticket to configured queue if state is set - use of wildcards possible (e.g. &lt;OTRS_TicketDynamicField1&gt;).</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflowAutomaticStateAction###FallbackOnErrorNote" Required="0" Valid="1">
        <Description Translatable="1">Choose to add a failure article to ticket, if target queue for automatic queue move does not exists.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Option SelectedID="0">
                <Item Key="0">No</Item>
                <Item Key="1">Yes</Item>
            </Option>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflowAutomaticStateAction###FallbackOnErrorQueue" Required="0" Valid="1">
        <Description Translatable="1">New ticket queue, if target queue for automatic queue move does not exists.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <String Regex=""></String>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateWorkflowAutomaticStateAction###FallbackOnErrorState" Required="0" Valid="1">
        <Description Translatable="1">New ticket state, if target state for automatic state change does not exists.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <String Regex="">new</String>
        </Setting>
    </ConfigItem>
    <!--  EO AUTOMATIC STATE ACTIONS -->

    <!--  QueueMoveWorkflow -->
    <ConfigItem Name="Ticket::EventModulePost###910-TicketQueueMoveWorkflowTickettype" Required="0" Valid="0">
        <Description Translatable="1">Updates ticket type if configured or required after queue move.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketQueueMoveWorkflowTickettype</Item>
                <Item Key="Event">TicketQueueUpdate</Item>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="Ticket::TicketQueueMoveWorkflowTickettype" Required="0" Valid="1">
        <Description Translatable="1">Defines Queue, TicketType and new TicketType for TicketQueueMoveWorkflowTickettype.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="Ticket::EventModulePost###920-TicketQueueMoveWorkflowState" Required="0" Valid="0">
        <Description Translatable="1">Updates ticket state if configured or required after queue move.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketQueueMoveWorkflowState</Item>
                <Item Key="Event">TicketQueueUpdate</Item>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="Ticket::TicketQueueMoveWorkflowState" Required="0" Valid="1">
        <Description Translatable="1">Defines Queue, TicketType and new State for TicketQueueMoveWorkflowState.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <!-- EO QueueMoveWorkflow -->

    <!-- TICKETSTATEAUTOUPDATE PER TICKET TYPE -->
    <ConfigItem Name="Ticket::EventModulePost###900-TicketStateAutoUpdate" Required="0" Valid="1">
        <Description Translatable="1">Updates ticket state after unlock ticket based on selected ticket type.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketStateAutoUpdate</Item>
                <Item Key="Event">TicketLockUpdate</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateAutoUpdate###NonOverridableTicketStateOnUnlock" Required="1" Valid="1">
        <Description Translatable="1">Settings for TicketState to define the following possible state. States have to be comma separated.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateAutoUpdate###NonOverridableTicketStateOnLock" Required="1" Valid="1">
        <Description Translatable="1">Settings for TicketState to define the following possible state. States have to be comma separated.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateAutoUpdate###DefaultTicketStateOnUnlock" Required="1" Valid="1">
        <Description Translatable="1">Settings for Default TicketState to define the default following possible state on unlock.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketStateAutoUpdate###DefaultTicketStateOnLock" Required="0" Valid="1">
        <Description Translatable="1">Settings for Default TicketState to define the default following possible state un lock.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>

    <ConfigItem Name="Ticket::EventModulePost###900-TicketUnlockOnStateUpdate" Required="1" Valid="1">
        <Description Translatable="1">Performs ticket update actions after state update - currently limited to state update.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::TicketUnlockOnStateUpdate</Item>
                <Item Key="Event">TicketStateUpdate</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="TicketUnlockOnStateUpdate###ValidStates" Required="1" Valid="1">
        <Description Translatable="1">Defines which state will unlock the ticket.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
            </Hash>
        </Setting>
    </ConfigItem>

    <!-- TICKETSTATEAUTOUPDATE PER TICKET TYPE -->

    <ConfigItem Name="Ticket::EventModulePost###701-StateUpdateOnWebrequestFollowUp" Required="0" Valid="0">
        <Description Translatable="1">State update for closed tickets if a new article of type webrequest is created in customer interface.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::StateUpdateOnWebrequestFollowUp</Item>
                <Item Key="Event">(ArticleCreate)</Item>
            </Hash>
        </Setting>
    </ConfigItem>
    <ConfigItem Name="Ticket::EventModulePost###955-RemoveArticleFlagsOnTicketClose" Required="1" Valid="1">
        <Description Translatable="1">Performs ticket update actions after state update - currently limited to state update.</Description>
        <Group>KIX4OTRS</Group>
        <SubGroup>Core::TicketStateWorkflow</SubGroup>
        <Setting>
            <Hash>
                <Item Key="Module">Kernel::System::Ticket::Event::RemoveArticleFlagsOnTicketClose</Item>
                <Item Key="Event">TicketStateUpdate</Item>
            </Hash>
        </Setting>
    </ConfigItem>
</otrs_config>
